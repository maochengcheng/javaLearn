
cglib 继承的方式，覆盖父类的方法
JDK 采用实现的方式，必须要求代理的目标对象一定要实现一个接口
都是通过生成字节码，重组成一个新的类

jdk Proxy 对于用户来说，依赖更强，调用更复杂
cglib 对目标类没有任何的要求

cglib 效率更高，性能也更高，底层没有用到反射
jdk proxy 生成逻辑较为简单，执行效率低，每次都要用反射

cglib 有个坑，目标代理类不能有final的方法，忽略final修饰的方法


代理模式的优点
代理模式能将代理对象与真实被调用的目标对象分离
一定程度上降低了系统的耦合性，易于扩展
第阿里可以起到保护目标对象的作用
增强目标对象的职责
缺点
代理模式会造成系统设计中类的数目数量
在客户端和目标对象之间增加了一个代理对象，请求处理速度变慢
增加了系统的复杂度

Spring中的代理选择原则
1.当Bean有实现接口时，Spring就会用JDK的动态代理
2.当Bean没有实现类时，Spring选择CGLIB
3.Spring可以通过配置强制使用CGLIB，只需要在Spring的配置文件中加入如下代码
<aop:aspectj-autoproxy proxy-target-class="true"/>